// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OC.Infra;

#nullable disable

namespace OC.Infra.Migrations
{
    [DbContext(typeof(OCContext))]
    partial class OCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OC.Entities.LogMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeChannelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("LogMessages", (string)null);
                });

            modelBuilder.Entity("OC.Entities.TypeChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeChannels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Whatsapp"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SMS"
                        });
                });

            modelBuilder.Entity("OC.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("OC.Entities.UserTypeChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TypeChannelId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTypeChannel", (string)null);
                });

            modelBuilder.Entity("OC.Entities.LogMessage", b =>
                {
                    b.HasOne("OC.Entities.TypeChannel", "TypeChannel")
                        .WithMany("LogMessages")
                        .HasForeignKey("TypeChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OC.Entities.User", "User")
                        .WithMany("LogMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeChannel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OC.Entities.UserTypeChannel", b =>
                {
                    b.HasOne("OC.Entities.TypeChannel", "TypeChannel")
                        .WithMany("UserTypeChannel")
                        .HasForeignKey("TypeChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OC.Entities.User", "User")
                        .WithMany("UserTypeChannel")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeChannel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OC.Entities.TypeChannel", b =>
                {
                    b.Navigation("LogMessages");

                    b.Navigation("UserTypeChannel");
                });

            modelBuilder.Entity("OC.Entities.User", b =>
                {
                    b.Navigation("LogMessages");

                    b.Navigation("UserTypeChannel");
                });
#pragma warning restore 612, 618
        }
    }
}
